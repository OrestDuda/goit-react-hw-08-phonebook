{"version":3,"sources":["Components/Contacts/Contacts.module.css","Components/ContactForm/ContactForm.module.css","Components/Container/Container.module.css","Redux/Phonebook/contacts-operations.js","Redux/Phonebook/contacts-selectors.js","Components/ContactForm/ContactForm.js","Components/Contacts/ContactList.js","Components/Contacts/ContactFilter.js","Components/Container/Container.js","Views/PhonebookView.js"],"names":["module","exports","axios","defaults","baseURL","inputData","dispatch","contact","name","number","actions","addContactRequest","post","then","data","addContactSuccess","catch","error","addContactError","contactID","deleteContactRequest","delete","deleteContactSuccess","deleteContactError","fetchContactsRequest","get","fetchContactsSuccess","fetchContactsError","getFilter","state","phonebook","filter","getContacts","contacts","getLoading","loading","getFilteredContacts","createSelector","allContacts","normalizedFilter","toLowerCase","includes","ContactForm","handleChange","event","currentTarget","value","setState","handleSubmit","preventDefault","props","contactsIn","find","alert","submitted","className","styles","form","onSubmit","this","inputForm","type","pattern","title","required","onChange","btnAdd","Component","connect","contactsSelectors","contactsOperations","ContactList","fetchContacts","isLoadingContacts","color","height","width","style","textAlign","map","id","onClick","onDeleteContact","searchQuery","contactsActions","changeFilter","search","Container","children","container","PhonebookView"],"mappings":"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","file":"static/js/phonebook.2febb82e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"contact\":\"Contacts_contact__3_TQl\",\"search\":\"Contacts_search__3rC8e\",\"delete\":\"Contacts_delete__16OwR\",\"list\":\"Contacts_list__otVY-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"inputForm\":\"ContactForm_inputForm__2de9Q\",\"btnAdd\":\"ContactForm_btnAdd__2M8yM\",\"form\":\"ContactForm_form__2IF4m\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Container_container__3e1Mh\"};","import axios from \"axios\";\nimport actions from \"./contacts-actions\";\n\naxios.defaults.baseURL = \"https://connections-api.herokuapp.com\";\n\nconst fetchContacts = () => (dispatch) => {\n  dispatch(actions.fetchContactsRequest());\n\n  axios\n    .get(\"/contacts\")\n    .then(({ data }) => dispatch(actions.fetchContactsSuccess(data)))\n    .catch((error) => dispatch(actions.fetchContactsError()));\n};\nconst addContact = (inputData) => (dispatch) => {\n  const contact = {\n    name: inputData.name,\n    number: inputData.number,\n  };\n  dispatch(actions.addContactRequest());\n\n  axios\n    .post(\"/contacts\", contact)\n    .then(({ data }) => dispatch(actions.addContactSuccess(data)))\n    .catch((error) => dispatch(actions.addContactError()));\n};\nconst deleteContact = (contactID) => (dispatch) => {\n  dispatch(actions.deleteContactRequest());\n  axios\n    .delete(`/contacts/${contactID}`)\n    .then(() => dispatch(actions.deleteContactSuccess(contactID)))\n    .catch((error) => dispatch(actions.deleteContactError()));\n};\n\n// eslint-disable-next-line import/no-anonymous-default-export\nexport default { addContact, deleteContact, fetchContacts };\n","import { createSelector } from \"@reduxjs/toolkit\";\n\nconst getLoading = (state) => state.phonebook.loading;\nconst getFilter = (state) => state.phonebook.filter;\nconst getContacts = (state) => state.phonebook.contacts;\n\nconst getFilteredContacts = createSelector(\n  [getContacts, getFilter],\n  (allContacts, filter) => {\n    const normalizedFilter = filter.toLowerCase();\n    return allContacts.filter((contact) =>\n      contact.name.toLowerCase().includes(normalizedFilter)\n    );\n  }\n);\n// eslint-disable-next-line import/no-anonymous-default-export\nexport default {\n  getLoading,\n  getFilter,\n  getContacts,\n  getFilteredContacts,\n};\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport styles from \"./ContactForm.module.css\";\nimport { connect } from \"react-redux\";\nimport contactsOperations from \"../../Redux/Phonebook/contacts-operations\";\nimport contactsSelectors from \"../../Redux/Phonebook/contacts-selectors\";\n\nclass ContactForm extends Component {\n  state = {\n    name: \"\",\n    number: \"\",\n  };\n\n  handleChange = (event) => {\n    const { name, value } = event.currentTarget;\n    this.setState({ [name]: value });\n  };\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n    if (this.props.contactsIn.find(({ name }) => name === this.state.name)) {\n      alert(this.state.name + \"is already in contacts\");\n      return;\n    }\n    this.props.submitted(this.state);\n    this.setState({ name: \"\", number: \"\" });\n  };\n\n  render() {\n    return (\n      <form className={styles.form} onSubmit={this.handleSubmit}>\n        <label>\n          Name\n          <input\n            className={styles.inputForm}\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            required\n            value={this.state.name}\n            onChange={this.handleChange}\n          />\n        </label>\n        <label>\n          Phone\n          <input\n            className={styles.inputForm}\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n            required\n            value={this.state.number}\n            onChange={this.handleChange}\n          />\n        </label>\n        <button className={styles.btnAdd} type=\"submit\">\n          Add Contact\n        </button>\n      </form>\n    );\n  }\n}\n\nContactForm.propTypes = {\n  submitted: PropTypes.func,\n  contactsIn: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string,\n    })\n  ),\n};\nconst mapStateToProps = (state) => ({\n  contactsIn: contactsSelectors.getContacts(state),\n});\nconst mapDispatchToProps = (dispatch) => ({\n  submitted: (contact) => dispatch(contactsOperations.addContact(contact)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport styles from \"./Contacts.module.css\";\nimport { connect } from \"react-redux\";\nimport contactsOperations from \"../../Redux/Phonebook/contacts-operations\";\nimport contactsSelectors from \"../../Redux/Phonebook/contacts-selectors\";\nimport Loader from \"react-loader-spinner\";\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\n\nclass ContactList extends Component {\n  componentDidMount() {\n    this.props.fetchContacts();\n  }\n\n  render() {\n    return (\n      <>\n        {this.props.isLoadingContacts && (\n          <Loader\n            type=\"TailSpin\"\n            color=\"teal\"\n            height={130}\n            width={130}\n            style={{\n              textAlign: \"center\",\n            }}\n          />\n        )}\n        <ul>\n          {this.props.contacts.map(({ id, name, number }) => (\n            <li key={id}>\n              <p className={styles.contact}>\n                {name}: {number}\n              </p>\n              <button\n                type=\"button\"\n                onClick={() => this.props.onDeleteContact(id)}\n              >\n                Delete\n              </button>\n            </li>\n          ))}\n        </ul>\n      </>\n    );\n  }\n}\n\nContactList.propTypes = {\n  onDeleteContact: PropTypes.func,\n  fetchContacts: PropTypes.func,\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string,\n    })\n  ),\n};\n\nconst mapStateToProps = (state) => ({\n  isLoadingContacts: contactsSelectors.getLoading(state),\n  contacts: contactsSelectors.getFilteredContacts(state),\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  fetchContacts: () => dispatch(contactsOperations.fetchContacts()),\n  onDeleteContact: (id) => dispatch(contactsOperations.deleteContact(id)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport styles from \"./Contacts.module.css\";\nimport { connect } from \"react-redux\";\nimport contactsActions from \"../../Redux/Phonebook/contacts-actions\";\nimport contactsSelectors from \"../../Redux/Phonebook/contacts-selectors\";\n\nconst ContactFilter = ({ searchQuery, onChange }) => (\n  <label>\n    Filter contacts by name\n    <input\n      className={styles.search}\n      type=\"text\"\n      value={searchQuery}\n      onChange={onChange}\n    />\n  </label>\n);\n\nContactFilter.propTypes = {\n  value: PropTypes.string,\n  onChange: PropTypes.func,\n};\n\nconst mapStateToProps = (state) => ({\n  searchQuery: contactsSelectors.getFilter(state),\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  onChange: (event) =>\n    dispatch(contactsActions.changeFilter(event.currentTarget.value)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactFilter);\n","import React from \"react\";\nimport styles from \"./Container.module.css\";\n\nconst Container = ({ children }) => {\n  return <div className={styles.container}>{children}</div>;\n};\nexport default Container;\n","import React from \"react\";\nimport ContactForm from \"../Components/ContactForm/ContactForm.js\";\nimport ContactList from \"../Components/Contacts/ContactList\";\nimport ContactFilter from \"../Components/Contacts/ContactFilter\";\nimport Container from \"../Components/Container/Container\";\n\nconst PhonebookView = () => {\n  return (\n    <div>\n      <Container>\n        <h2>Phonebook</h2>\n        <ContactForm />\n        <h2>Contacts</h2>\n        <ContactFilter />\n        <ContactList />\n      </Container>\n    </div>\n  );\n};\n\nexport default PhonebookView;\n"],"sourceRoot":""}