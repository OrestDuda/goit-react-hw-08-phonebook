{"version":3,"sources":["Views/RegisterView.module.css","Views/RegisterView.js"],"names":["module","exports","RegisterView","state","name","email","password","handleChange","event","currentTarget","value","setState","handleSubmit","preventDefault","props","submitted","className","styles","title","onSubmit","this","autoComplete","type","pattern","required","onChange","Component","connect","dispatch","userInput","authOperations","userRegister"],"mappings":"mIACAA,EAAOC,QAAU,CAAC,MAAQ,8B,mICIpBC,E,4MACJC,MAAQ,CACNC,KAAM,GACNC,MAAO,GACPC,SAAU,I,EAGZC,aAAe,SAACC,GACd,MAAwBA,EAAMC,cAAtBL,EAAR,EAAQA,KAAMM,EAAd,EAAcA,MACd,EAAKC,SAAL,eAAiBP,EAAOM,K,EAG1BE,aAAe,SAACJ,GACdA,EAAMK,iBACN,EAAKC,MAAMC,UAAU,EAAKZ,OAC1B,EAAKQ,SAAS,CAAEP,KAAM,GAAIC,MAAO,GAAIC,SAAU,M,4CAGjD,WACE,OACE,qCACE,mBAAGU,UAAWC,IAAOC,MAArB,sBAEA,uBAAMC,SAAUC,KAAKR,aAAcS,aAAa,MAAhD,UACE,yCAEE,uBACEC,KAAK,OACLlB,KAAK,OACLmB,QAAQ,yHACRL,MAAM,kcACNM,UAAQ,EACRd,MAAOU,KAAKjB,MAAMC,KAClBqB,SAAUL,KAAKb,kBAGnB,0CAEE,uBACEe,KAAK,QACLlB,KAAK,QACLoB,UAAQ,EACRd,MAAOU,KAAKjB,MAAME,MAClBoB,SAAUL,KAAKb,kBAGnB,6CAEE,uBACEe,KAAK,WACLlB,KAAK,WACLoB,UAAQ,EACRd,MAAOU,KAAKjB,MAAMG,SAClBmB,SAAUL,KAAKb,kBAGnB,wBAAQe,KAAK,SAAb,gC,GAxDiBI,aAmEZC,sBAAQ,MAJI,SAACC,GAAD,MAAe,CACxCb,UAAW,SAACc,GAAD,OAAeD,EAASE,IAAeC,aAAaF,QAGlDF,CAAkCzB","file":"static/js/register.8bded577.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"RegisterView_title__3te5Z\"};","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport authOperations from \"../Redux/Authentification/auth-operations\";\nimport styles from \"./RegisterView.module.css\";\n\nclass RegisterView extends Component {\n  state = {\n    name: \"\",\n    email: \"\",\n    password: \"\",\n  };\n\n  handleChange = (event) => {\n    const { name, value } = event.currentTarget;\n    this.setState({ [name]: value });\n  };\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n    this.props.submitted(this.state);\n    this.setState({ name: \"\", email: \"\", password: \"\" });\n  };\n\n  render() {\n    return (\n      <>\n        <p className={styles.title}>Register</p>\n\n        <form onSubmit={this.handleSubmit} autoComplete=\"off\">\n          <label>\n            Name\n            <input\n              type=\"text\"\n              name=\"name\"\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n              title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n              required\n              value={this.state.name}\n              onChange={this.handleChange}\n            />\n          </label>\n          <label>\n            Email\n            <input\n              type=\"email\"\n              name=\"email\"\n              required\n              value={this.state.email}\n              onChange={this.handleChange}\n            />\n          </label>\n          <label>\n            Password\n            <input\n              type=\"password\"\n              name=\"password\"\n              required\n              value={this.state.password}\n              onChange={this.handleChange}\n            />\n          </label>\n          <button type=\"submit\">Register</button>\n        </form>\n      </>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  submitted: (userInput) => dispatch(authOperations.userRegister(userInput)),\n});\n\nexport default connect(null, mapDispatchToProps)(RegisterView);\n"],"sourceRoot":""}